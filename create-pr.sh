#!/usr/bin/env nix-shell
#!nix-shell -i bash -p curl gh jq semver-tool

set -eou pipefail

# Note: for the time being all PRs target master, but this is configurable should the need arise to target eg staging.
TARGET_BRANCH="master"

# Check that there's a diff from the updater script. See https://stackoverflow.com/questions/3878624/how-do-i-programmatically-determine-if-there-are-uncommitted-changes.
if git diff-index --quiet HEAD --; then
    echo "No diff after running updater."
    exit 0
fi

newversion="$(nix-instantiate --eval -E "with import ./. {}; lib.getVersion $PACKAGE" --json | jq -r)"
changelog="$(nix-instantiate --eval -E "with import ./. {}; $PACKAGE.meta.changelog" --json | jq -r)"

# Sometimes there's a diff but the version is still the same. For example this
# happens when the hash has been changed to be in SRI format. In other cases you
# can even get downgrade suggestions as in https://github.com/NixOS/nixpkgs/pull/197638.
if [[ $(semver compare "$PRE_VERSION" "$newversion") != "-1" ]]; then
    echo "$newversion does not appear to be an upgrade from $PRE_VERSION"
    exit 0
fi

echo "Updating $PACKAGE from version $PRE_VERSION to version $newversion"

# GitHub doesn't support exact matches in its Search thingy (https://stackoverflow.com/questions/26433561/how-to-search-on-github-to-get-exact-matches-like-what-quotes-do-for-google).
# As a workaround we tag each PR with a unique string we can search later to
# check if we've already created a PR for the same update.
tag=$(echo "nixpkgs-upkeep $PACKAGE $newversion $TARGET_BRANCH" | md5sum | cut -d ' ' -f 1)

# Search to see if we've already created a PR for this version of the package.
existing_prs=$(curl --silent --get -H "Accept: application/vnd.github.v3+json" --data-urlencode "q=$tag org:NixOS repo:nixpkgs type:pr author:botnk" https://api.github.com/search/issues)
existing_prs_count=$(echo "$existing_prs" | jq .total_count)
if [ "$existing_prs_count" -gt 0 ]; then
    echo "There seems to be an existing PR for this change already:"
    echo "$existing_prs" | jq .items[].pull_request.html_url
    exit 0
fi

# We need to set up our git user config in order to commit.
git config --global user.email "github-botnk@korz.dev"
git config --global user.name "botnk"

# We need to get a complete unshallow checkout if we're going to push to another
# repo. See https://github.community/t/automating-push-to-public-repo/17742/11?u=samuela
# and https://stackoverflow.com/questions/28983842/remote-rejected-shallow-update-not-allowed-after-changing-git-remote-url.
# We start with only a shallow clone because it's far, far faster and it most
# cases we don't ever need to push anything.
git fetch --unshallow origin

# Checkout the target branch first so that our commit has the right parent.
git checkout "$TARGET_BRANCH"

# See https://serverfault.com/questions/151109/how-do-i-get-the-current-unix-time-in-milliseconds-in-bash.
branch="upkeep-bot/$PACKAGE-$newversion-$(date +%s)"
git checkout -b "$branch"
git add .
git commit -m "$PACKAGE: $PRE_VERSION -> $newversion"
git push --set-upstream "https://botnk:$GH_TOKEN@github.com/botnk/nixpkgs.git" "$branch"

# Note: we cannot put the tag into a comment because GitHub search apparently does not index them.
# Also we need to escape backticks for code blocks because otherwise they turn into string interpolation, running the
# commands. See https://stackoverflow.com/a/2310284/3880977.
body=$(cat <<-_EOM_
Upgrades ${PACKAGE} from ${PRE_VERSION} to ${newversion}

This PR was automatically generated by [nixpkgs-upkeep](https://github.com/niklaskorz/nixpkgs-upkeep).

- Changelog: $changelog
- [CI workflow](${GITHUB_WORKFLOW_URL}) that created this PR.
- Internal tag: ${tag}.

## Things done

<!-- Please check what applies. Note that these are not hard requirements but merely serve as information for reviewers. -->

- Built on platform(s)
  - [ ] x86_64-linux
  - [ ] aarch64-linux
  - [ ] x86_64-darwin
  - [ ] aarch64-darwin
- For non-Linux: Is sandboxing enabled in `nix.conf`? (See [Nix manual](https://nixos.org/manual/nix/stable/command-ref/conf-file.html))
  - [ ] `sandbox = relaxed`
  - [ ] `sandbox = true`
- [ ] Tested, as applicable:
  - [NixOS test(s)](https://nixos.org/manual/nixos/unstable/index.html#sec-nixos-tests) (look inside [nixos/tests](https://github.com/NixOS/nixpkgs/blob/master/nixos/tests))
  - and/or [package tests](https://github.com/NixOS/nixpkgs/blob/master/pkgs/README.md#package-tests)
  - or, for functions and "core" functionality, tests in [lib/tests](https://github.com/NixOS/nixpkgs/blob/master/lib/tests) or [pkgs/test](https://github.com/NixOS/nixpkgs/blob/master/pkgs/test)
  - made sure NixOS tests are [linked](https://github.com/NixOS/nixpkgs/blob/master/pkgs/README.md#linking-nixos-module-tests-to-a-package) to the relevant packages
- [ ] Tested compilation of all packages that depend on this change using `nix-shell -p nixpkgs-review --run "nixpkgs-review rev HEAD"`. Note: all changes have to be committed, also see [nixpkgs-review usage](https://github.com/Mic92/nixpkgs-review#usage)
- [ ] Tested basic functionality of all binary files (usually in `./result/bin/`)
- [Nixpkgs 25.11 Release Notes](https://github.com/NixOS/nixpkgs/blob/master/doc/release-notes/rl-2511.section.md) (or backporting [24.11](https://github.com/NixOS/nixpkgs/blob/master/nixos/doc/release-notes/rl-2411.section.md) and [25.05](https://github.com/NixOS/nixpkgs/blob/master/doc/manual/release-notes/rl-2505.section.md) Nixpkgs Release notes)
  - [ ] (Package updates) Added a release notes entry if the change is major or breaking
- [NixOS 25.11 Release Notes](https://github.com/NixOS/nixpkgs/blob/master/nixos/doc/manual/release-notes/rl-2511.section.md) (or backporting [24.11](https://github.com/NixOS/nixpkgs/blob/master/nixos/doc/manual/release-notes/rl-2411.section.md) and [25.05](https://github.com/NixOS/nixpkgs/blob/master/nixos/doc/manual/release-notes/rl-2505.section.md) NixOS Release notes)
  - [ ] (Module updates) Added a release notes entry if the change is significant
  - [ ] (Module addition) Added a release notes entry if adding a new NixOS module
- [ ] Fits [CONTRIBUTING.md](https://github.com/NixOS/nixpkgs/blob/master/CONTRIBUTING.md), [pkgs/README.md](https://github.com/NixOS/nixpkgs/blob/master/pkgs/README.md), [maintainers/README.md](https://github.com/NixOS/nixpkgs/blob/master/maintainers/README.md) and other contributing documentation in corresponding paths.

---

Add a :+1: [reaction] to [pull requests you find important].

[reaction]: https://github.blog/2016-03-10-add-reactions-to-pull-requests-issues-and-comments/
[pull requests you find important]: https://github.com/NixOS/nixpkgs/pulls?q=is%3Aopen+sort%3Areactions-%2B1-desc

_EOM_
)

echo "Creating a new draft PR on NixOS/nixpkgs..."
# For some reason specifying the repo works and is necessary for `--head` but is not accepted by `--base`. Instead we
# specify `--repo` just to be explicit.
pr_url=$(gh pr create \
    --repo "NixOS/nixpkgs" \
    --head "botnk:$branch" \
    --base "$TARGET_BRANCH" \
    --title "$PACKAGE: $PRE_VERSION -> $newversion" \
    --body "$body" \
    --draft)
echo "Created PR: $pr_url"

echo "Running nix-build..."
if build_log=$(nix-build -A "$PACKAGE" 2>&1); then
    # Use --body-file to work around "Argument list too long" errors.
    body_file=$(mktemp)

    cat <<-_EOM_ > "$body_file"
nix-build was successful! Marking this PR as ready for review.

<details>
<summary>Complete build log</summary>

\`\`\`
> nix-build -A ${PACKAGE}
${build_log}
\`\`\`
</details>
_EOM_

    gh pr comment "$pr_url" --body-file "$body_file"
    gh pr ready "$pr_url"
    rm -f "$body_file"
else
    abbreviated_build_log=$(tail -n15 < "$build_log")
    body_file=$(mktemp)
    cat <<-_EOM_ > "$body_file"
nix-build failed. Leaving this PR as a draft for now. Push commits to this branch and mark as "ready for review" once
the build issues have been resolved.

Abbreviated log:
\`\`\`
> nix-build -A ${PACKAGE}
...
${abbreviated_build_log}
\`\`\`

<details>
<summary>Complete build log</summary>

\`\`\`
> nix-build -A ${PACKAGE}
${build_log}
\`\`\`
</details>
_EOM_

    gh pr comment "$pr_url" --body-file "$body_file"
    rm -f "$body_file"
fi

# TODO: run nixpkgs-review as well if nix-build succeeds
